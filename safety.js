// Global variables
let currentLanguage = 'en';
let stepsToday = 0;
let wearableConnected = false; // Status for Bluetooth connection

// Translation data - Expanded for calculator, buttons, and more
const translations = {
    en: {
        'headline': 'Just like Ma watches over you, so do we.',
        'tagline': 'A safety-first initiative to ensure a secure and joyful Pujo for all.',
        'safety-map-title': 'Interactive Safety Map',
        'real-time-location': 'Toggle Real-Time Location',
        'search-zone-placeholder': 'Search for safe zones or exits',
        'search-zone-button': 'Search',
        'helpline-title': 'Helpline & Quick Contacts',
        'police': 'Police',
        'medical': 'Medical',
        'report-incident': 'Report an Incident',
        'report-button': 'Report',
        'whatsapp': 'WhatsApp',
        'step-calculator-title': 'Step Footprint Calculator ЁЯж╢',
        'step-input-placeholder': 'Enter steps walked today',
        'calculate-button': 'Calculate',
        'steps-today': 'Steps Today:',
        'carbon-avoided': 'Carbon Footprint Avoided:',
        'stars-earned': 'Stars Earned:',
        'safety-tips-title': 'WomenтАЩs & Public Safety Tips',
        'travel-safety': 'Travel Safety',
        'travel-safety-desc': 'Always share your live location with a trusted contact.',
        'avoid-crowd': 'Avoid Getting Lost in Crowd',
        'avoid-crowd-desc': 'Memorize nearby landmarks and stay close to the edges of crowds.',
        'emergency-gestures': 'Emergency Gestures & Code Words',
        'emergency-gestures-desc': 'Use local code words or gestures to signal for help discreetly.',
        'safety-badge': 'Safety Badge Checklist',
        'power-bank': 'Power bank',
        'id-card': 'ID card',
        'landmark': 'Nearby landmark memorized',
        'location-shared': 'Location shared',
        'volunteer-title': 'Become a Safety Volunteer',
        'register-button': 'Register Interest',
        'volunteer-testimonial': 'Being a volunteer during Pujo has been one of the most rewarding experiences of my life. I feel proud to contribute to the safety of my community.',
        'chatbot-title': 'Chatbot + FAQ',
        'chatbot-header': 'Ask Me Anything',
        'chatbot-message': 'Hi! How can I assist you today?',
        'chatbot-input-placeholder': 'Type your question here...',
        'send-button': 'Send',
        'footer-text': 'Made with тЭдя╕П for a Safer Pujo',
        'partners': 'Partners: Kolkata Police | Local NGOs | Student Groups',
        'step-tip-high': 'Great job! YouтАЩve walked a lot today, reducing your carbon footprint significantly.',
        'step-tip-medium': 'Good effort! Keep walking to earn more stars and reduce emissions.',
        'step-tip-low': 'Every step counts! Try walking more to stay healthy and eco-friendly.',
        'report-alert': 'This action would open a detailed report form.',
        'bot-help': 'Please contact the nearest police station or helpline for assistance.',
        'bot-lost': 'Stay where you are and contact the Lost & Found helpline immediately.',
        'bot-default': 'IтАЩm here to help. Please ask a specific question about safety or Pujo.',
        'map-placeholder': 'Map loading...',
        'bluetooth-sync-prompt': 'Sync with your wearable device:',
        'sync-wearable-button': 'Connect Device',
        'sync-status-connecting': 'Connecting...',
        'sync-status-connected': 'Device Connected!',
        'sync-status-failed': 'Connection Failed. Please try again.',
        'sync-status-no-device': 'No compatible Bluetooth device found.'
    },
    bn: {
        'headline': 'ржорж╛ржпрж╝рзЗрж░ ржЪрзЛржЦ ржпрзЗржоржи ржЖржкржирж╛рж░ ржЙржкрж░, ржЖржорж░рж╛ржУ ржарж┐ржХ рждрзЗржоржирж┐ ржкрж╛рж╢рзЗ ржЖржЫрж┐ред',
        'tagline': 'ржПржХржЯрж┐ ржирж┐рж░рж╛ржкрждрзНрждрж╛-ржкрзНрж░ржержо ржЙржжрзНржпрзЛржЧ ржпрж╛рждрзЗ рж╕ржмрж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржирж┐рж░рж╛ржкржж ржПржмржВ ржЖржиржирзНржжрзЛрждрзНрж╕ржм ржкрзБржЬрзЛ ржирж┐рж╢рзНржЪрж┐ржд рж╣ржпрж╝ред',
        'safety-map-title': 'ржЕржВрждрж░рзНржнрзБржХрзНржд ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржорж╛ржиржЪрж┐рждрзНрж░',
        'real-time-location': 'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЕржмрж╕рзНржерж╛ржи ржЯржЧрж▓ ржХрж░рзБржи',
        'search-zone-placeholder': 'ржирж┐рж░рж╛ржкржж ржЕржЮрзНржЪрж▓ ржмрж╛ ржкрзНрж░рж╕рзНржерж╛ржи ржЦрзБржБржЬрзБржи',
        'search-zone-button': 'ржЦрзБржБржЬрзБржи',
        'helpline-title': 'рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи ржПржмржВ ржжрзНрж░рзБржд ржпрзЛржЧрж╛ржпрзЛржЧ',
        'police': 'ржкрзБрж▓рж┐рж╢',
        'medical': 'ржорзЗржбрж┐ржХрзЗрж▓',
        'report-incident': 'ржШржЯржирж╛ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рзБржи',
        'report-button': 'рж░рж┐ржкрзЛрж░рзНржЯ',
        'whatsapp': 'рж╣рзНржпрж╛ржЯрж╕ржЕрзНржпрж╛ржк',
        'step-calculator-title': 'ржкржжржЪрж┐рж╣рзНржи ржлрзБржЯржкрзНрж░рж┐ржирзНржЯ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░ ЁЯж╢',
        'step-input-placeholder': 'ржЖржЬ рж╣рж╛ржБржЯрж╛ ржкржжрж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи',
        'calculate-button': 'ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯ',
        'steps-today': 'ржЖржЬржХрзЗрж░ ржкржжрж╕ржВржЦрзНржпрж╛:',
        'carbon-avoided': 'ржХрж╛рж░рзНржмржи ржлрзБржЯржкрзНрж░рж┐ржирзНржЯ ржмрзЗржБржЪрзЗ ржЧрзЗржЫрзЗ:',
        'stars-earned': 'ржЕрж░рзНржЬрж┐ржд рждрж╛рж░рж╛:',
        'safety-tips-title': 'ржорж╣рж┐рж▓рж╛ ржУ ржЬржирж╕рж╛ржзрж╛рж░ржгрзЗрж░ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржЯрж┐ржкрж╕',
        'travel-safety': 'ржнрзНрж░ржоржг ржирж┐рж░рж╛ржкрждрзНрждрж╛',
        'travel-safety-desc': 'рж╕ржмрж╕ржоржпрж╝ ржЖржкржирж╛рж░ рж▓рж╛ржЗржн ржЕржмрж╕рзНржерж╛ржи ржПржХржЬржи ржмрж┐рж╢рзНржмрж╕рзНржд ржмрзНржпржХрзНрждрж┐рж░ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред',
        'avoid-crowd': 'ржнрж┐ржбрж╝рзЗ рж╣рж╛рж░рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи',
        'avoid-crowd-desc': 'ржирж┐ржХржЯрж╕рзНрже рж▓рзНржпрж╛ржирзНржбржорж╛рж░рзНржХ ржорзБржЦрж╕рзНрже ржХрж░рзБржи ржПржмржВ ржнрж┐ржбрж╝рзЗрж░ ржХрж┐ржирж╛рж░рж╛ржпрж╝ ржерж╛ржХрзБржиред',
        'emergency-gestures': 'ржЬрж░рзБрж░рж┐ ржЗрж╢рж╛рж░рж╛ ржПржмржВ ржХрзЛржб рж╢ржмрзНржж',
        'emergency-gestures-desc': 'рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржЧрзЛржкржирзЗ рж╕рзНржерж╛ржирзАржпрж╝ ржХрзЛржб рж╢ржмрзНржж ржмрж╛ ржЗрж╢рж╛рж░рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред',
        'safety-badge': 'ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржмрзНржпрж╛ржЬ ржЪрзЗржХрж▓рж┐рж╕рзНржЯ',
        'power-bank': 'ржкрж╛ржУржпрж╝рж╛рж░ ржмрзНржпрж╛ржВржХ',
        'id-card': 'ржЖржЗржбрж┐ ржХрж╛рж░рзНржб',
        'landmark': 'ржирж┐ржХржЯрж╕рзНрже рж▓рзНржпрж╛ржирзНржбржорж╛рж░рзНржХ ржорзБржЦрж╕рзНрже',
        'location-shared': 'ржЕржмрж╕рзНржерж╛ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ',
        'volunteer-title': 'ржирж┐рж░рж╛ржкрждрзНрждрж╛ рж╕рзНржмрзЗржЪрзНржЫрж╛рж╕рзЗржмрзА рж╣рзЛржи',
        'register-button': 'ржЖржЧрзНрж░рж╣ ржирж┐ржмржирзНржзржи ржХрж░рзБржи',
        'volunteer-testimonial': 'ржкрзБржЬрзЛ рж╕ржоржпрж╝ рж╕рзНржмрзЗржЪрзНржЫрж╛рж╕рзЗржмрзА рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рж╛ ржЖржорж╛рж░ ржЬрзАржмржирзЗрж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржкрзБрж░рж╕рзНржХрж╛рж░рж┐ржд ржЕржнрж┐ржЬрзНржЮрждрж╛ ржПржХржЯрж┐ред ржЖржорж┐ ржЖржорж╛рж░ рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржирж┐рж░рж╛ржкрждрзНрждрж╛ржпрж╝ ржЕржмржжрж╛ржи рж░рж╛ржЦрждрзЗ ржЧрж░рзНржмрж┐рждред',
        'chatbot-title': 'ржЪрзНржпрж╛ржЯржмржЯ + FAQ',
        'chatbot-header': 'ржЖржорж╛ржХрзЗ ржпрзЗ ржХрж┐ржЫрзБ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи',
        'chatbot-message': 'рж╣рзНржпрж╛рж▓рзЛ! ржЖржЬ ржЖржкржирж╛ржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐?',
        'chatbot-input-placeholder': 'ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи...',
        'send-button': 'ржкрж╛ржарж╛ржи',
        'footer-text': 'ржПржХржЯрж┐ ржирж┐рж░рж╛ржкржж ржкрзБржЬрзЛрж░ ржЬржирзНржп тЭдя╕П ржжрж┐ржпрж╝рзЗ рждрзИрж░рж┐',
        'partners': 'рж╕рж╣ржпрзЛржЧрзА: ржХрж▓ржХрж╛рждрж╛ ржкрзБрж▓рж┐рж╢ | рж╕рзНржерж╛ржирзАржпрж╝ ржПржиржЬрж┐ржУ | ржЫрж╛рждрзНрж░ ржЧрзЛрж╖рзНржарзА',
        'step-tip-high': 'ржнрж╛рж▓рзЛ ржХрж╛ржЬ! ржЖржкржирж┐ ржЖржЬ ржЕржирзЗржХ рж╣рж╛ржБржЯрзЗржЫрзЗржи, ржЖржкржирж╛рж░ ржХрж╛рж░рзНржмржи ржлрзБржЯржкрзНрж░рж┐ржирзНржЯ ржмрзЗрж╢рж┐ ржХржорж┐ржпрж╝рзЗржЫрзЗржиред',
        'step-tip-medium': 'ржнрж╛рж▓рзЛ ржкрзНрж░ржпрж╝рж╛рж╕! ржЖрж░ржУ рждрж╛рж░рж╛ ржЕрж░рзНржЬржи ржПржмржВ ржХрж╛рж░рзНржмржи ржХржорж╛рждрзЗ ржЖрж░ржУ рж╣рж╛ржБржЯрзБржиред',
        'step-tip-low': 'ржкрзНрж░рждрж┐ржЯрж┐ ржкржж ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг! рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕ржорзНржоржд ржПржмржВ ржкрж░рж┐ржмрзЗрж╢-ржмрж╛ржирзНржзржм ржерж╛ржХрждрзЗ ржЖрж░ржУ рж╣рж╛ржБржЯрждрзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'report-alert': 'ржПржЗ ржЕрзНржпрж╛ржХрж╢ржиржЯрж┐ ржПржХржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж░рж┐ржкрзЛрж░рзНржЯ ржлрж░рзНржо ржЦрзБрж▓ржмрзЗред',
        'bot-help': 'рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржжржпрж╝рж╛ ржХрж░рзЗ ржирж┐ржХржЯрждржо ржкрзБрж▓рж┐рж╢ рж╕рзНржЯрзЗрж╢ржи ржмрж╛ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред',
        'bot-lost': 'ржЖржкржирж┐ ржпрзЗржЦрж╛ржирзЗ ржЖржЫрзЗржи рж╕рзЗржЦрж╛ржирзЗржЗ ржерж╛ржХрзБржи ржПржмржВ ржЕржмрж┐рж▓ржорзНржмрзЗ рж╣рж╛рж░рж╛ржирзЛ ржУ ржкрж╛ржУржпрж╝рж╛ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред',
        'bot-default': 'ржЖржорж┐ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржмрж╛ ржкрзБржЬрзЛ рж╕ржорзНржкрж░рзНржХрзЗ ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржиред',
        'map-placeholder': 'ржорж╛ржиржЪрж┐рждрзНрж░ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
        'bluetooth-sync-prompt': 'ржЖржкржирж╛рж░ ржкрж░рж┐ржзрж╛ржиржпрзЛржЧрзНржп ржбрж┐ржнрж╛ржЗрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╕рж┐ржЩрзНржХ ржХрж░рзБржи:',
        'sync-wearable-button': 'ржбрж┐ржнрж╛ржЗрж╕ рж╕ржВржпрзЛржЧ ржХрж░рзБржи',
        'sync-status-connecting': 'рж╕ржВржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...',
        'sync-status-connected': 'ржбрж┐ржнрж╛ржЗрж╕ рж╕ржВржпрзБржХрзНржд!',
        'sync-status-failed': 'рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНржеред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'sync-status-no-device': 'ржХрзЛржи рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржг ржмрзНрж▓рзБржЯрзБрже ржбрж┐ржнрж╛ржЗрж╕ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред'
    },
};

// --- General Functions ---
function setLanguage(lang) {
    currentLanguage = lang;
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === lang) {
            btn.classList.add('active');
        }
    });
    updateTranslations();
    updateCalculatorTips(); // Update tips after language change
}

function updateTranslations() {
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        if (translations[currentLanguage][key]) {
            element.textContent = translations[currentLanguage][key];
        }
    });

    document.querySelectorAll('[data-translate-placeholder]').forEach(element => {
        const key = element.getAttribute('data-translate-placeholder');
        if (translations[currentLanguage][key]) {
            element.placeholder = translations[currentLanguage][key];
        }
    });
}

// Notification system (can be added if needed, similar to previous version)
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification'; // Assumes a .notification class exists in CSS
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => {
        notification.style.animation = 'slideUp 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// --- Map Related Functions (Placeholders) ---
function initializeSafetyMap() {
    const mapContainer = document.getElementById('safety-map');
    // In a real application, you would initialize Leaflet or Google Maps here.
    // For now, we'll just show the placeholder text.
    console.log("Map initialization placeholder.");
}

function toggleRealTimeLocation() {
    alert(translations[currentLanguage]['real-time-location']); // Placeholder action
}

function searchSafeZone() {
    const searchInput = document.getElementById('search-zone');
    const query = searchInput.value.trim();
    if (query) {
        alert(`Searching for "${query}" in safe zones.`); // Placeholder action
    } else {
        alert('Please enter a zone to search.');
    }
}

// --- Helpline and Reporting Functions ---
function openWhatsApp(number) {
    // Placeholder for WhatsApp integration
    // In a real app, this would construct a WhatsApp link.
    // For testing, show an alert.
    alert(`Would open WhatsApp chat for number: ${number}`);
}

function openReportForm() {
    // Placeholder for report form
    alert(translations[currentLanguage]['report-alert']);
}

// --- Step Footprint Calculator Functions ---

// Constants for calculation (can be adjusted)
const CARBON_PER_STEP = 0.00015; // kg CO2 per step (slightly lower, more eco-conscious)
const STARS_PER_STEP = 1000; // 1 star per 1000 steps

function calculateFootprint() {
    const stepInput = document.getElementById('step-input');
    stepsToday = parseInt(stepInput.value) || 0;

    const carbonAvoided = (stepsToday * CARBON_PER_STEP).toFixed(2);
    const starsEarned = Math.floor(stepsToday / STARS_PER_STEP);

    // Update result display
    document.getElementById('steps-count').textContent = stepsToday;
    document.getElementById('carbon-avoided').textContent = `${carbonAvoided} kg`;
    document.getElementById('stars-earned').textContent = starsEarned;

    updateCalculatorTips();
}

function updateCalculatorTips() {
    const stepTipElement = document.getElementById('step-tip');
    if (stepsToday === 0) {
        stepTipElement.textContent = ''; // Clear tips if steps are 0
        return;
    }

    let tipText = '';
    if (stepsToday >= 7000) { // Increased threshold for "high"
        tipText = translations[currentLanguage]['step-tip-high'];
    } else if (stepsToday >= 2000) { // Increased threshold for "medium"
        tipText = translations[currentLanguage]['step-tip-medium'];
    } else {
        tipText = translations[currentLanguage]['step-tip-low'];
    }
    stepTipElement.textContent = tipText;
}


// --- Bluetooth Sync Functionality (Placeholder) ---
function syncWearable() {
    const syncStatusElement = document.getElementById('sync-status');
    syncStatusElement.textContent = translations[currentLanguage]['sync-status-connecting'];
    syncStatusElement.style.color = 'var(--primary-color)'; // Indicate connecting

    // Simulate Bluetooth connection attempt
    setTimeout(() => {
        // In a real scenario, this would involve Web Bluetooth API or similar.
        // For this example, we'll simulate a random success/failure.
        const success = Math.random() > 0.3; // 70% chance of success

        if (success) {
            wearableConnected = true;
            syncStatusElement.textContent = translations[currentLanguage]['sync-status-connected'];
            syncStatusElement.style.color = 'var(--accent-2)'; // Green for success
            // Optionally, automatically trigger calculateFootprint() if steps are available
            // For simplicity, we require manual input or a placeholder for fetched steps.
            alert('Wearable device connected! You can now manually enter steps or sync them if the feature were fully implemented.');
        } else {
            wearableConnected = false;
            syncStatusElement.textContent = translations[currentLanguage]['sync-status-no-device']; // Simulating no device found as a common failure
            syncStatusElement.style.color = 'var(--error-red)';
            alert(translations[currentLanguage]['sync-status-failed']);
        }
    }, 2000); // Simulate a 2-second connection attempt
}


// --- Chatbot Functions ---
function sendMessage() {
    const input = document.getElementById('chatbot-input');
    const message = input.value.trim();
    const chatbotBody = document.getElementById('chatbot-body');

    if (!message) return; // Do nothing if input is empty

    // Display user message
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'chatbot-message user';
    userMessageDiv.textContent = message;
    chatbotBody.appendChild(userMessageDiv);

    // Simulate bot response
    const botResponse = getBotResponse(message);
    setTimeout(() => {
        const botMessageDiv = document.createElement('div');
        botMessageDiv.className = 'chatbot-message bot';
        botMessageDiv.textContent = botResponse;
        chatbotBody.appendChild(botMessageDiv);
        chatbotBody.scrollTop = chatbotBody.scrollHeight; // Scroll to bottom
    }, 800); // Simulate typing delay

    input.value = ''; // Clear input field
    chatbotBody.scrollTop = chatbotBody.scrollHeight; // Scroll to bottom
}

function getBotResponse(message) {
    const lowerCaseMessage = message.toLowerCase();

    // More specific Bengali responses for common queries
    if (currentLanguage === 'bn') {
        if (lowerCaseMessage.includes('рж╣рзЗрж▓рзНржк') || lowerCaseMessage.includes('рж╕рж╛рж╣рж╛ржпрзНржп')) {
            return translations.bn['bot-help'];
        } else if (lowerCaseMessage.includes('рж╣рж╛рж░рж┐ржпрж╝рзЗ') || lowerCaseMessage.includes('ржлрзЛржи')) {
            return translations.bn['bot-lost'];
        } else if (lowerCaseMessage.includes('ржорж╛ржиржЪрж┐рждрзНрж░') || lowerCaseMessage.includes('ржХрзЛржерж╛ржпрж╝')) {
            return translations.bn['bot-default']; // Default for map related, might need specific logic
        } else if (lowerCaseMessage.includes('ржкржжржХрзНрж╖рзЗржк') || lowerCaseMessage.includes('рж╣рж╛ржБржЯрж╛')) {
            return `ржЖржкржирж┐ ${stepsToday} ржзрж╛ржк рж╣рзЗржБржЯрзЗржЫрзЗржиред ржХрж╛рж░рзНржмржи ржлрзБржЯржкрзНрж░рж┐ржирзНржЯ ржПржбрж╝рж╛рждрзЗ ржПржЯрж┐ ржПржХржЯрж┐ ржжрзБрж░рзНржжрж╛ржирзНржд ржЙржкрж╛ржпрж╝!`;
        }
    } else { // English responses
        if (lowerCaseMessage.includes('help') || lowerCaseMessage.includes('assist')) {
            return translations.en['bot-help'];
        } else if (lowerCaseMessage.includes('lost') || lowerCaseMessage.includes('phone')) {
            return translations.en['bot-lost'];
        } else if (lowerCaseMessage.includes('map') || lowerCaseMessage.includes('where')) {
            return translations.en['bot-default']; // Default for map related, might need specific logic
        } else if (lowerCaseMessage.includes('steps') || lowerCaseMessage.includes('walked')) {
            return `You've walked ${stepsToday} steps. That's a great way to reduce your carbon footprint!`;
        }
    }
    // Default response if no specific match
    return translations[currentLanguage]['bot-default'];
}

// --- Initialization ---
document.addEventListener('DOMContentLoaded', () => {
    setLanguage(currentLanguage); // Set default language and translate UI

    // Add event listeners for language buttons
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', () => setLanguage(btn.getAttribute('data-lang')));
    });

    // Add event listener for calculator button
    const calculateBtn = document.getElementById('calculate-btn');
    if (calculateBtn) {
        calculateBtn.addEventListener('click', calculateFootprint);
    }

    // Add event listener for chatbot input (Enter key)
    const chatbotInput = document.getElementById('chatbot-input');
    if (chatbotInput) {
        chatbotInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }

    // Initialize map placeholder
    initializeSafetyMap();

    // Initial check for tips based on loaded/default values
    updateCalculatorTips();
});